type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LBRACKET
  | RBRACKET
  | COLON
  | PLUS
  | MINUS
  | ASSIGN
  | CONCAT
  | EQ
  | NEQ
  | OCTDOWN
  | OCTUP
  | HALFUP
  | HALFDOWN
  | LT
  | LEQ
  | GT
  | GEQ
  | INCREASE_DURATION
  | DECREASE_DURATION
  | ASSIGN_PLUS
  | ASSIGN_MINUS
  | ASSIGN_REMOVE
  | ASSIGN_OCTUP
  | ASSIGN_OCTDOWN
  | ASSIGN_CONCAT
  | RETURN
  | IF
  | ELSE
  | WHILE
  | LOOP
  | CLOSEFILE
  | OPENFILE
  | TRUE
  | FALSE
  | TEMPO
  | STARTTRACK
  | STOPTRACK
  | LITERAL of (int)
  | ID of (string)
  | NOTE of (string)
  | EOF
  | DEF

open Parsing;;
let _ = parse_error;;
# 1 "parser.mly"
 open Ast 
# 56 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LBRACKET *);
  264 (* RBRACKET *);
  265 (* COLON *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* ASSIGN *);
  269 (* CONCAT *);
  270 (* EQ *);
  271 (* NEQ *);
  272 (* OCTDOWN *);
  273 (* OCTUP *);
  274 (* HALFUP *);
  275 (* HALFDOWN *);
  276 (* LT *);
  277 (* LEQ *);
  278 (* GT *);
  279 (* GEQ *);
  280 (* INCREASE_DURATION *);
  281 (* DECREASE_DURATION *);
  282 (* ASSIGN_PLUS *);
  283 (* ASSIGN_MINUS *);
  284 (* ASSIGN_REMOVE *);
  285 (* ASSIGN_OCTUP *);
  286 (* ASSIGN_OCTDOWN *);
  287 (* ASSIGN_CONCAT *);
  288 (* RETURN *);
  289 (* IF *);
  290 (* ELSE *);
  291 (* WHILE *);
  292 (* LOOP *);
  293 (* CLOSEFILE *);
  294 (* OPENFILE *);
  295 (* TRUE *);
  296 (* FALSE *);
  297 (* TEMPO *);
  298 (* STARTTRACK *);
  299 (* STOPTRACK *);
    0 (* EOF *);
  303 (* DEF *);
    0|]

let yytransl_block = [|
  300 (* LITERAL *);
  301 (* ID *);
  302 (* NOTE *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\003\000\004\000\004\000\007\000\007\000\
\005\000\005\000\002\000\006\000\006\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\010\000\010\000\012\000\012\000\011\000\013\000\013\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\008\000\000\000\001\000\001\000\003\000\
\000\000\002\000\003\000\000\000\002\000\002\000\003\000\003\000\
\005\000\007\000\005\000\007\000\001\000\001\000\001\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\004\000\003\000\003\000\002\000\
\000\000\001\000\001\000\003\000\001\000\003\000\004\000\002\000"

let yydefred = "\000\000\
\001\000\000\000\000\000\000\000\000\000\002\000\003\000\000\000\
\000\000\007\000\000\000\000\000\011\000\000\000\000\000\009\000\
\008\000\000\000\010\000\000\000\000\000\012\000\004\000\000\000\
\000\000\000\000\000\000\000\000\021\000\000\000\023\000\013\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\000\000\014\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\016\000\047\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\
\025\000\000\000\000\000\000\000\000\000\037\000\036\000\000\000\
\000\000\000\000\000\000\038\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\054\000\
\000\000\000\000\019\000\000\000\055\000\000\000\000\000\018\000\
\020\000"

let yydgoto = "\002\000\
\003\000\006\000\007\000\011\000\018\000\020\000\012\000\032\000\
\033\000\037\000\045\000\038\000\046\000"

let yysindex = "\004\000\
\000\000\000\000\021\255\012\255\212\254\000\000\000\000\008\255\
\055\255\000\000\062\255\053\255\000\000\067\255\027\255\000\000\
\000\000\030\255\000\000\050\255\004\255\000\000\000\000\004\255\
\004\255\072\255\077\255\078\255\000\000\000\255\000\000\000\000\
\225\255\204\000\056\255\068\001\076\255\081\255\252\255\004\255\
\004\255\004\255\004\255\046\255\000\000\086\255\000\000\004\255\
\004\255\004\255\004\255\004\255\004\255\004\255\004\255\000\000\
\000\000\004\255\004\255\004\255\004\255\004\255\004\255\004\255\
\004\255\004\255\004\255\004\255\000\000\000\000\000\000\004\255\
\000\000\229\000\254\000\046\001\094\255\090\255\065\255\000\000\
\000\000\068\001\106\001\090\001\090\001\000\000\000\000\255\254\
\255\254\255\254\255\254\000\000\000\000\068\001\068\001\068\001\
\068\001\068\001\068\001\121\255\121\255\004\255\000\000\000\000\
\091\255\080\255\000\000\023\001\000\000\121\255\121\255\000\000\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\105\000\000\000\000\000\000\000\000\000\109\255\
\000\000\000\000\000\000\115\255\000\000\000\000\000\000\000\000\
\000\000\071\255\000\000\000\000\000\000\000\000\000\000\112\255\
\000\000\000\000\000\000\000\000\000\000\167\255\000\000\000\000\
\000\000\000\000\000\000\152\255\000\000\005\255\000\000\000\000\
\000\000\000\000\119\255\000\000\000\000\198\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\061\255\027\000\118\255\182\000\000\000\000\000\058\000\
\089\000\120\000\151\000\000\000\000\000\128\255\068\000\099\000\
\130\000\161\000\156\255\000\000\000\000\000\000\000\000\000\000\
\000\000\106\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\117\000\000\000\000\000\000\000\118\000\000\000\181\255\
\235\255\100\000\000\000\000\000\000\000"

let yytablesize = 643
let yytable = "\034\000\
\009\000\043\000\036\000\039\000\001\000\021\000\044\000\050\000\
\048\000\049\000\024\000\051\000\050\000\008\000\054\000\055\000\
\056\000\057\000\074\000\075\000\076\000\036\000\062\000\063\000\
\106\000\107\000\080\000\081\000\082\000\083\000\084\000\085\000\
\086\000\087\000\112\000\113\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\029\000\
\030\000\031\000\099\000\021\000\010\000\022\000\023\000\013\000\
\024\000\021\000\015\000\022\000\070\000\033\000\024\000\033\000\
\014\000\004\000\033\000\005\000\033\000\033\000\016\000\017\000\
\012\000\040\000\012\000\012\000\005\000\012\000\041\000\042\000\
\108\000\025\000\026\000\071\000\027\000\028\000\072\000\025\000\
\026\000\078\000\027\000\028\000\079\000\029\000\030\000\031\000\
\103\000\104\000\109\000\029\000\030\000\031\000\012\000\012\000\
\056\000\012\000\012\000\017\000\105\000\017\000\017\000\005\000\
\017\000\110\000\012\000\012\000\012\000\006\000\026\000\049\000\
\026\000\049\000\021\000\026\000\022\000\026\000\026\000\024\000\
\040\000\026\000\040\000\026\000\026\000\040\000\019\000\040\000\
\040\000\017\000\017\000\035\000\017\000\017\000\077\000\026\000\
\026\000\000\000\026\000\026\000\026\000\017\000\017\000\017\000\
\025\000\026\000\051\000\027\000\028\000\051\000\052\000\051\000\
\000\000\052\000\000\000\052\000\029\000\030\000\031\000\022\000\
\000\000\022\000\000\000\000\000\022\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\000\000\022\000\022\000\022\000\053\000\000\000\
\053\000\000\000\000\000\053\000\000\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\047\000\053\000\053\000\053\000\000\000\000\000\000\000\
\000\000\000\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\056\000\057\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\073\000\066\000\067\000\068\000\
\000\000\000\000\000\000\000\000\000\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\066\000\067\000\068\000\032\000\000\000\032\000\000\000\000\000\
\032\000\000\000\032\000\032\000\000\000\000\000\032\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\032\000\032\000\
\032\000\032\000\000\000\000\000\032\000\032\000\000\000\032\000\
\032\000\032\000\028\000\000\000\028\000\000\000\000\000\028\000\
\000\000\028\000\028\000\000\000\041\000\028\000\041\000\028\000\
\028\000\041\000\000\000\041\000\041\000\028\000\028\000\028\000\
\028\000\000\000\000\000\028\000\028\000\000\000\028\000\028\000\
\028\000\029\000\000\000\029\000\000\000\000\000\029\000\000\000\
\029\000\029\000\000\000\042\000\029\000\042\000\029\000\029\000\
\042\000\000\000\042\000\042\000\029\000\029\000\029\000\029\000\
\000\000\000\000\029\000\029\000\000\000\029\000\029\000\029\000\
\030\000\000\000\030\000\000\000\000\000\030\000\000\000\030\000\
\030\000\000\000\043\000\030\000\043\000\030\000\030\000\043\000\
\000\000\043\000\043\000\030\000\030\000\030\000\030\000\000\000\
\000\000\030\000\030\000\000\000\030\000\030\000\030\000\031\000\
\000\000\031\000\000\000\000\000\031\000\000\000\031\000\031\000\
\000\000\044\000\031\000\044\000\031\000\031\000\044\000\000\000\
\044\000\044\000\031\000\031\000\031\000\031\000\000\000\000\000\
\031\000\031\000\000\000\031\000\031\000\031\000\027\000\000\000\
\027\000\000\000\000\000\027\000\000\000\027\000\027\000\000\000\
\000\000\027\000\000\000\027\000\027\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\027\000\
\027\000\000\000\027\000\027\000\027\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\100\000\
\066\000\067\000\068\000\000\000\000\000\000\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\063\000\064\000\065\000\
\101\000\066\000\067\000\068\000\000\000\000\000\000\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\111\000\066\000\067\000\068\000\000\000\000\000\000\000\
\048\000\049\000\050\000\051\000\052\000\053\000\054\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\000\000\066\000\067\000\068\000\102\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\000\000\066\000\067\000\068\000\048\000\049\000\050\000\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\064\000\065\000\000\000\
\066\000\067\000\068\000\048\000\049\000\000\000\051\000\000\000\
\000\000\054\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\048\000\049\000\000\000\000\000\000\000\
\000\000\054\000\055\000\056\000\057\000\000\000\000\000\000\000\
\000\000\062\000\063\000"

let yycheck = "\021\000\
\045\001\002\001\024\000\025\000\001\000\002\001\007\001\003\001\
\010\001\011\001\007\001\013\001\008\001\002\001\016\001\017\001\
\018\001\019\001\040\000\041\000\042\000\043\000\024\001\025\001\
\100\000\101\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\055\000\110\000\111\000\058\000\059\000\060\000\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\044\001\
\045\001\046\001\072\000\002\001\045\001\004\001\005\001\001\001\
\007\001\002\001\006\001\004\001\005\001\001\001\007\001\003\001\
\003\001\045\001\006\001\047\001\008\001\009\001\004\001\045\001\
\002\001\002\001\004\001\005\001\047\001\007\001\002\001\002\001\
\102\000\032\001\033\001\008\001\035\001\036\001\006\001\032\001\
\033\001\044\001\035\001\036\001\007\001\044\001\045\001\046\001\
\003\001\008\001\008\001\044\001\045\001\046\001\032\001\033\001\
\000\000\035\001\036\001\002\001\044\001\004\001\005\001\003\001\
\007\001\034\001\044\001\045\001\046\001\003\001\001\001\008\001\
\003\001\003\001\002\001\006\001\004\001\008\001\009\001\007\001\
\001\001\012\001\003\001\014\001\015\001\006\001\018\000\008\001\
\009\001\032\001\033\001\022\000\035\001\036\001\043\000\026\001\
\027\001\255\255\029\001\030\001\031\001\044\001\045\001\046\001\
\032\001\033\001\003\001\035\001\036\001\006\001\003\001\008\001\
\255\255\006\001\255\255\008\001\044\001\045\001\046\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\031\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\001\001\029\001\030\001\031\001\255\255\255\255\255\255\
\255\255\255\255\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\029\001\030\001\031\001\
\255\255\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\030\001\031\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\008\001\009\001\255\255\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\255\255\026\001\027\001\255\255\029\001\
\030\001\031\001\001\001\255\255\003\001\255\255\255\255\006\001\
\255\255\008\001\009\001\255\255\001\001\012\001\003\001\014\001\
\015\001\006\001\255\255\008\001\009\001\020\001\021\001\022\001\
\023\001\255\255\255\255\026\001\027\001\255\255\029\001\030\001\
\031\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\008\001\009\001\255\255\001\001\012\001\003\001\014\001\015\001\
\006\001\255\255\008\001\009\001\020\001\021\001\022\001\023\001\
\255\255\255\255\026\001\027\001\255\255\029\001\030\001\031\001\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\008\001\
\009\001\255\255\001\001\012\001\003\001\014\001\015\001\006\001\
\255\255\008\001\009\001\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\027\001\255\255\029\001\030\001\031\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\008\001\009\001\
\255\255\001\001\012\001\003\001\014\001\015\001\006\001\255\255\
\008\001\009\001\020\001\021\001\022\001\023\001\255\255\255\255\
\026\001\027\001\255\255\029\001\030\001\031\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\008\001\009\001\255\255\
\255\255\012\001\255\255\014\001\015\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\003\001\026\001\
\027\001\255\255\029\001\030\001\031\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\003\001\
\029\001\030\001\031\001\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\003\001\029\001\030\001\031\001\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\003\001\029\001\030\001\031\001\255\255\255\255\255\255\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\031\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\029\001\030\001\031\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\030\001\031\001\010\001\011\001\255\255\013\001\255\255\
\255\255\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\025\001\010\001\011\001\255\255\255\255\255\255\
\255\255\016\001\017\001\018\001\019\001\255\255\255\255\255\255\
\255\255\024\001\025\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  COLON\000\
  PLUS\000\
  MINUS\000\
  ASSIGN\000\
  CONCAT\000\
  EQ\000\
  NEQ\000\
  OCTDOWN\000\
  OCTUP\000\
  HALFUP\000\
  HALFDOWN\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  INCREASE_DURATION\000\
  DECREASE_DURATION\000\
  ASSIGN_PLUS\000\
  ASSIGN_MINUS\000\
  ASSIGN_REMOVE\000\
  ASSIGN_OCTUP\000\
  ASSIGN_OCTDOWN\000\
  ASSIGN_CONCAT\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  WHILE\000\
  LOOP\000\
  CLOSEFILE\000\
  OPENFILE\000\
  TRUE\000\
  FALSE\000\
  TEMPO\000\
  STARTTRACK\000\
  STOPTRACK\000\
  EOF\000\
  DEF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  NOTE\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 36 "parser.mly"
                 ( [], [] )
# 415 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 37 "parser.mly"
                 ( (_2 :: fst _1), snd _1 )
# 423 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.program) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 38 "parser.mly"
                 ( fst _1, (_2 :: snd _1) )
# 431 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 42 "parser.mly"
     ( { fname = _1;
   formals = _3;
   locals = List.rev _6;
   body = List.rev _7 } )
# 444 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 49 "parser.mly"
                  ( [] )
# 450 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 50 "parser.mly"
                  ( List.rev _1 )
# 457 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 53 "parser.mly"
                         ( [_1] )
# 464 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 54 "parser.mly"
                         ( _3 :: _1 )
# 472 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "parser.mly"
                     ( [] )
# 478 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 58 "parser.mly"
                     ( _2 :: _1 )
# 486 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 61 "parser.mly"
               ( _2 )
# 493 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
                   ( [] )
# 499 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 65 "parser.mly"
                   ( _2 :: _1 )
# 507 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 68 "parser.mly"
              ( Expr(_1) )
# 514 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                     ( Return(_2) )
# 521 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 70 "parser.mly"
                            ( Block(List.rev _2) )
# 528 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 71 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 536 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 72 "parser.mly"
                                            ( If(_3, _5, _7) )
# 545 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 73 "parser.mly"
                                  ( While(_3, _5) )
# 553 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 74 "parser.mly"
                                            ( Loop(_3, _5, _7) )
# 562 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 77 "parser.mly"
                     ( Literal(_1) )
# 569 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
                     ( Id(_1) )
# 576 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
                     ( Note(_1) )
# 583 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                     ( Binop(_1, Plus,   _3) )
# 591 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                     ( Binop(_1, Minus,   _3) )
# 599 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                     ( Binop(_1, Equal, _3) )
# 607 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                     ( Binop(_1, Neq,   _3) )
# 615 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                     ( Binop(_1, Less, _3) )
# 623 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                      ( Binop(_1, Leq, _3) )
# 631 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                      ( Binop(_1, Geq, _3) )
# 647 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                     ( Binop(_1, Concat, _3) )
# 655 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                       ( Assign(_1, _3) )
# 663 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                ( Binop(_1, Plus, Literal(1)))
# 670 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                  ( Binop(_1, Minus, Literal(1)))
# 677 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                      (Binop(_1,Octup,_3))
# 685 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                        ( Binop(_1, Octdown, _3))
# 693 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                                ( Binop(_1, IncDuration, _3))
# 701 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                ( Binop(_1, DecDuration, _3))
# 709 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                          ( Assign(_1, Binop(_1,Plus,_3) ))
# 717 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                           ( Assign(_1, Binop(_1,Minus,_3) ))
# 725 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 98 "parser.mly"
                           ( Assign(_1, Binop(_1,Octup,_3) ))
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
                             ( Assign(_1, Binop(_1,Octdown,_3) ))
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 100 "parser.mly"
                            ( Assign(_1, Binop(_1,Concat,_3) ))
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 101 "parser.mly"
                                 ( Call(_1, _3) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 102 "parser.mly"
                       ( _2 )
# 764 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 103 "parser.mly"
                                  ( Array(_2) )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'index_opt) in
    Obj.repr(
# 104 "parser.mly"
                 ( Index(_1,_2) )
# 779 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 108 "parser.mly"
                  ( [] )
# 785 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 109 "parser.mly"
                  ( List.rev _1 )
# 792 "parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                            ( [_1] )
# 799 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'actuals_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                            ( _3 :: _1 )
# 807 "parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'indices) in
    Obj.repr(
# 116 "parser.mly"
          ( List.rev _1 )
# 814 "parser.ml"
               : 'index_opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 119 "parser.mly"
                            ( [_2] )
# 821 "parser.ml"
               : 'indices))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'indices) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    Obj.repr(
# 120 "parser.mly"
                                      (_3 :: _1)
# 829 "parser.ml"
               : 'indices))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
