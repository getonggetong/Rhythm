OBJS = ast.cmo parser.cmo scanner.cmo datalib.cmo compile.cmo rhythm.cmo

TESTS = \
arith1 \
arith2 \
fib \
for1 \
func1 \
func2 \
func3 \
gcd \
global1 \
hello \
if1 \
if2 \
if3 \
if4 \
ops1 \
var1 \
while1

TARFILES = Makefile testall.sh scanner.mll parser.mly \
	ast.ml datalib.ml compile.ml rhythm.ml \
	$(TESTS:%=tests/test-%.mc) \
	$(TESTS:%=tests/test-%.out)

rhythm : $(OBJS)
	ocamlc -o rhythm $(OBJS)

.PHONY : test
test : rhythm testall.sh
	./testall.sh

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -c $<

%.cmi : %.mli
	ocamlc -c $<

rhythm.tar.gz : $(TARFILES)
	cd .. && tar czf rhythm/rhythm.tar.gz $(TARFILES:%=rhythm/%)

.PHONY : clean
clean :
	rm -f rhythm parser.ml parser.mli scanner.ml testall.log \
	*.cmo *.cmi *.out *.diff

# Generated by ocamldep *.ml *.mli
ast.cmo: 
ast.cmx: 
compile.cmo: ast.cmo datalib.cmo 
compile.cmx: ast.cmx datalib.cmx 
rhythm.cmo: scanner.cmo parser.cmi datalib.cmo compile.cmo ast.cmo 
rhythm.cmx: scanner.cmx parser.cmx datalib.cmx compile.cmx ast.cmx 
parser.cmo: ast.cmo parser.cmi 
parser.cmx: ast.cmx parser.cmi 
scanner.cmo: parser.cmi 
scanner.cmx: parser.cmx 
parser.cmi: ast.cmo 
